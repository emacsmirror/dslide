\input texinfo    @c -*- texinfo -*-
@c %**start of header
@setfilename dslide.info
@settitle Domain Specific sLIDEs
@documentencoding UTF-8
@documentlanguage en
@comment !!!THIS FILE HAS BEEN GENERATED!!! Edit manual.org instead!
@c %**end of header

@copying
GNU GENERAL PUBLIC LICENSE
   Version 3@comma{} 29 June 2007

Copyright (C) 2007 Free Software Foundation@comma{} Inc. @uref{http://fsf.org/}
Everyone is permitted to copy and distribute verbatim copies
of this license document@comma{} but changing it is not allowed.

Preamble

  The GNU General Public License is a free@comma{} copyleft license for
software and other kinds of works.

  The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast@comma{}
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We@comma{} the Free Software Foundation@comma{} use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs@comma{} too.

  When we speak of free software@comma{} we are referring to freedom@comma{} not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish)@comma{} that you receive source code or can get it if you
want it@comma{} that you can change the software or use pieces of it in new
free programs@comma{} and that you know you can do these things.

  To protect your rights@comma{} we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore@comma{} you have
certain responsibilities if you distribute copies of the software@comma{} or if
you modify it: responsibilities to respect the freedom of others.

  For example@comma{} if you distribute copies of such a program@comma{} whether
gratis or for a fee@comma{} you must pass on to the recipients the same
freedoms that you received.  You must make sure that they@comma{} too@comma{} receive
or can get the source code.  And you must show them these terms so they
know their rights.

  Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software@comma{} and (2) offer you this License
giving you legal permission to copy@comma{} distribute and/or modify it.

  For the developers' and authors' protection@comma{} the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake@comma{} the GPL requires that modified versions be marked as
changed@comma{} so that their problems will not be attributed erroneously to
authors of previous versions.

  Some devices are designed to deny users access to install or run
modified versions of the software inside them@comma{} although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use@comma{} which is precisely where it is most unacceptable.  Therefore@comma{} we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains@comma{} we
stand ready to extend this provision to those domains in future versions
of the GPL@comma{} as needed to protect the freedom of users.

  Finally@comma{} every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers@comma{} but in those that do@comma{} we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this@comma{} the GPL assures that
patents cannot be used to render the program non-free.

  The precise terms and conditions for copying@comma{} distribution and
modification follow.

TERMS AND CONDITIONS

@enumerate
@item
Definitions.
@end enumerate

``This License'' refers to version 3 of the GNU General Public License.

  ``Copyright'' also means copyright-like laws that apply to other kinds of
works@comma{} such as semiconductor masks.

  ``The Program'' refers to any copyrightable work licensed under this
License.  Each licensee is addressed as ``you''.  ``Licensees'' and
``recipients'' may be individuals or organizations.

  To ``modify'' a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission@comma{} other than the making of an
exact copy.  The resulting work is called a ``modified version'' of the
earlier work or a work ``based on'' the earlier work.

  A ``covered work'' means either the unmodified Program or a work based
on the Program.

  To ``propagate'' a work means to do anything with it that@comma{} without
permission@comma{} would make you directly or secondarily liable for
infringement under applicable copyright law@comma{} except executing it on a
computer or modifying a private copy.  Propagation includes copying@comma{}
distribution (with or without modification)@comma{} making available to the
public@comma{} and in some countries other activities as well.

  To ``convey'' a work means any kind of propagation that enables other
parties to make or receive copies.  Mere interaction with a user through
a computer network@comma{} with no transfer of a copy@comma{} is not conveying.

  An interactive user interface displays ``Appropriate Legal Notices''
to the extent that it includes a convenient and prominently visible
feature that (1) displays an appropriate copyright notice@comma{} and (2)
tells the user that there is no warranty for the work (except to the
extent that warranties are provided)@comma{} that licensees may convey the
work under this License@comma{} and how to view a copy of this License.  If
the interface presents a list of user commands or options@comma{} such as a
menu@comma{} a prominent item in the list meets this criterion.

@enumerate
@item
Source Code.
@end enumerate

  The ``source code'' for a work means the preferred form of the work
for making modifications to it.  ``Object code'' means any non-source
form of a work.

  A ``Standard Interface'' means an interface that either is an official
standard defined by a recognized standards body@comma{} or@comma{} in the case of
interfaces specified for a particular programming language@comma{} one that
is widely used among developers working in that language.

  The ``System Libraries'' of an executable work include anything@comma{} other
than the work as a whole@comma{} that (a) is included in the normal form of
packaging a Major Component@comma{} but which is not part of that Major
Component@comma{} and (b) serves only to enable use of the work with that
Major Component@comma{} or to implement a Standard Interface for which an
implementation is available to the public in source code form.  A
``Major Component''@comma{} in this context@comma{} means a major essential component
(kernel@comma{} window system@comma{} and so on) of the specific operating system
(if any) on which the executable work runs@comma{} or a compiler used to
produce the work@comma{} or an object code interpreter used to run it.

  The ``Corresponding Source'' for a work in object code form means all
the source code needed to generate@comma{} install@comma{} and (for an executable
work) run the object code and to modify the work@comma{} including scripts to
control those activities.  However@comma{} it does not include the work's
System Libraries@comma{} or general-purpose tools or generally available free
programs which are used unmodified in performing those activities but
which are not part of the work.  For example@comma{} Corresponding Source
includes interface definition files associated with source files for
the work@comma{} and the source code for shared libraries and dynamically
linked subprograms that the work is specifically designed to require@comma{}
such as by intimate data communication or control flow between those
subprograms and other parts of the work.

  The Corresponding Source need not include anything that users
can regenerate automatically from other parts of the Corresponding
Source.

  The Corresponding Source for a work in source code form is that
same work.

@enumerate
@item
Basic Permissions.
@end enumerate

  All rights granted under this License are granted for the term of
copyright on the Program@comma{} and are irrevocable provided the stated
conditions are met.  This License explicitly affirms your unlimited
permission to run the unmodified Program.  The output from running a
covered work is covered by this License only if the output@comma{} given its
content@comma{} constitutes a covered work.  This License acknowledges your
rights of fair use or other equivalent@comma{} as provided by copyright law.

  You may make@comma{} run and propagate covered works that you do not
convey@comma{} without conditions so long as your license otherwise remains
in force.  You may convey covered works to others for the sole purpose
of having them make modifications exclusively for you@comma{} or provide you
with facilities for running those works@comma{} provided that you comply with
the terms of this License in conveying all material for which you do
not control copyright.  Those thus making or running the covered works
for you must do so exclusively on your behalf@comma{} under your direction
and control@comma{} on terms that prohibit them from making any copies of
your copyrighted material outside their relationship with you.

  Conveying under any other circumstances is permitted solely under
the conditions stated below.  Sublicensing is not allowed; section 10
makes it unnecessary.

@enumerate
@item
Protecting Users' Legal Rights From Anti-Circumvention Law.
@end enumerate

  No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article
11 of the WIPO copyright treaty adopted on 20 December 1996@comma{} or
similar laws prohibiting or restricting circumvention of such
measures.

  When you convey a covered work@comma{} you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to
the covered work@comma{} and you disclaim any intention to limit operation or
modification of the work as a means of enforcing@comma{} against the work's
users@comma{} your or third parties' legal rights to forbid circumvention of
technological measures.

@enumerate
@item
Conveying Verbatim Copies.
@end enumerate

  You may convey verbatim copies of the Program's source code as you
receive it@comma{} in any medium@comma{} provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice;
keep intact all notices stating that this License and any
non-permissive terms added in accord with section 7 apply to the code;
keep intact all notices of the absence of any warranty; and give all
recipients a copy of this License along with the Program.

  You may charge any price or no price for each copy that you convey@comma{}
and you may offer support or warranty protection for a fee.

@enumerate
@item
Conveying Modified Source Versions.
@end enumerate

  You may convey a work based on the Program@comma{} or the modifications to
produce it from the Program@comma{} in the form of source code under the
terms of section 4@comma{} provided that you also meet all of these conditions:

a) The work must carry prominent notices stating that you modified
it@comma{} and giving a relevant date.

b) The work must carry prominent notices stating that it is
released under this License and any conditions added under section
@enumerate
@item
This requirement modifies the requirement in section 4 to
@end enumerate
``keep intact all notices''.

c) You must license the entire work@comma{} as a whole@comma{} under this
License to anyone who comes into possession of a copy.  This
License will therefore apply@comma{} along with any applicable section 7
additional terms@comma{} to the whole of the work@comma{} and all its parts@comma{}
regardless of how they are packaged.  This License gives no
permission to license the work in any other way@comma{} but it does not
invalidate such permission if you have separately received it.

d) If the work has interactive user interfaces@comma{} each must display
Appropriate Legal Notices; however@comma{} if the Program has interactive
interfaces that do not display Appropriate Legal Notices@comma{} your
work need not make them do so.

  A compilation of a covered work with other separate and independent
works@comma{} which are not by their nature extensions of the covered work@comma{}
and which are not combined with it such as to form a larger program@comma{}
in or on a volume of a storage or distribution medium@comma{} is called an
``aggregate'' if the compilation and its resulting copyright are not
used to limit the access or legal rights of the compilation's users
beyond what the individual works permit.  Inclusion of a covered work
in an aggregate does not cause this License to apply to the other
parts of the aggregate.

@enumerate
@item
Conveying Non-Source Forms.
@end enumerate

  You may convey a covered work in object code form under the terms
of sections 4 and 5@comma{} provided that you also convey the
machine-readable Corresponding Source under the terms of this License@comma{}
in one of these ways:

a) Convey the object code in@comma{} or embodied in@comma{} a physical product
(including a physical distribution medium)@comma{} accompanied by the
Corresponding Source fixed on a durable physical medium
customarily used for software interchange.

b) Convey the object code in@comma{} or embodied in@comma{} a physical product
(including a physical distribution medium)@comma{} accompanied by a
written offer@comma{} valid for at least three years and valid for as
long as you offer spare parts or customer support for that product
model@comma{} to give anyone who possesses the object code either (1) a
copy of the Corresponding Source for all the software in the
product that is covered by this License@comma{} on a durable physical
medium customarily used for software interchange@comma{} for a price no
more than your reasonable cost of physically performing this
conveying of source@comma{} or (2) access to copy the
Corresponding Source from a network server at no charge.

c) Convey individual copies of the object code with a copy of the
written offer to provide the Corresponding Source.  This
alternative is allowed only occasionally and noncommercially@comma{} and
only if you received the object code with such an offer@comma{} in accord
with subsection 6b.

d) Convey the object code by offering access from a designated
place (gratis or for a charge)@comma{} and offer equivalent access to the
Corresponding Source in the same way through the same place at no
further charge.  You need not require recipients to copy the
Corresponding Source along with the object code.  If the place to
copy the object code is a network server@comma{} the Corresponding Source
may be on a different server (operated by you or a third party)
that supports equivalent copying facilities@comma{} provided you maintain
clear directions next to the object code saying where to find the
Corresponding Source.  Regardless of what server hosts the
Corresponding Source@comma{} you remain obligated to ensure that it is
available for as long as needed to satisfy these requirements.

e) Convey the object code using peer-to-peer transmission@comma{} provided
you inform other peers where the object code and Corresponding
Source of the work are being offered to the general public at no
charge under subsection 6d.

  A separable portion of the object code@comma{} whose source code is excluded
from the Corresponding Source as a System Library@comma{} need not be
included in conveying the object code work.

  A ``User Product'' is either (1) a ``consumer product''@comma{} which means any
tangible personal property which is normally used for personal@comma{} family@comma{}
or household purposes@comma{} or (2) anything designed or sold for incorporation
into a dwelling.  In determining whether a product is a consumer product@comma{}
doubtful cases shall be resolved in favor of coverage.  For a particular
product received by a particular user@comma{} ``normally used'' refers to a
typical or common use of that class of product@comma{} regardless of the status
of the particular user or of the way in which the particular user
actually uses@comma{} or expects or is expected to use@comma{} the product.  A product
is a consumer product regardless of whether the product has substantial
commercial@comma{} industrial or non-consumer uses@comma{} unless such uses represent
the only significant mode of use of the product.

  ``Installation Information'' for a User Product means any methods@comma{}
procedures@comma{} authorization keys@comma{} or other information required to install
and execute modified versions of a covered work in that User Product from
a modified version of its Corresponding Source.  The information must
suffice to ensure that the continued functioning of the modified object
code is in no case prevented or interfered with solely because
modification has been made.

  If you convey an object code work under this section in@comma{} or with@comma{} or
specifically for use in@comma{} a User Product@comma{} and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized)@comma{} the
Corresponding Source conveyed under this section must be accompanied
by the Installation Information.  But this requirement does not apply
if neither you nor any third party retains the ability to install
modified object code on the User Product (for example@comma{} the work has
been installed in ROM).

  The requirement to provide Installation Information does not include a
requirement to continue to provide support service@comma{} warranty@comma{} or updates
for a work that has been modified or installed by the recipient@comma{} or for
the User Product in which it has been modified or installed.  Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.

  Corresponding Source conveyed@comma{} and Installation Information provided@comma{}
in accord with this section must be in a format that is publicly
documented (and with an implementation available to the public in
source code form)@comma{} and must require no special password or key for
unpacking@comma{} reading or copying.

@enumerate
@item
Additional Terms.
@end enumerate

  ``Additional permissions'' are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License@comma{} to the extent
that they are valid under applicable law.  If additional permissions
apply only to part of the Program@comma{} that part may be used separately
under those permissions@comma{} but the entire Program remains governed by
this License without regard to the additional permissions.

  When you convey a copy of a covered work@comma{} you may at your option
remove any additional permissions from that copy@comma{} or from any part of
it.  (Additional permissions may be written to require their own
removal in certain cases when you modify the work.)  You may place
additional permissions on material@comma{} added by you to a covered work@comma{}
for which you have or can give appropriate copyright permission.

  Notwithstanding any other provision of this License@comma{} for material you
add to a covered work@comma{} you may (if authorized by the copyright holders of
that material) supplement the terms of this License with terms:

a) Disclaiming warranty or limiting liability differently from the
terms of sections 15 and 16 of this License; or

b) Requiring preservation of specified reasonable legal notices or
author attributions in that material or in the Appropriate Legal
Notices displayed by works containing it; or

c) Prohibiting misrepresentation of the origin of that material@comma{} or
requiring that modified versions of such material be marked in
reasonable ways as different from the original version; or

d) Limiting the use for publicity purposes of names of licensors or
authors of the material; or

e) Declining to grant rights under trademark law for use of some
trade names@comma{} trademarks@comma{} or service marks; or

f) Requiring indemnification of licensors and authors of that
material by anyone who conveys the material (or modified versions of
it) with contractual assumptions of liability to the recipient@comma{} for
any liability that these contractual assumptions directly impose on
those licensors and authors.

  All other non-permissive additional terms are considered ``further
restrictions'' within the meaning of section 10.  If the Program as you
received it@comma{} or any part of it@comma{} contains a notice stating that it is
governed by this License along with a term that is a further
restriction@comma{} you may remove that term.  If a license document contains
a further restriction but permits relicensing or conveying under this
License@comma{} you may add to a covered work material governed by the terms
of that license document@comma{} provided that the further restriction does
not survive such relicensing or conveying.

  If you add terms to a covered work in accord with this section@comma{} you
must place@comma{} in the relevant source files@comma{} a statement of the
additional terms that apply to those files@comma{} or a notice indicating
where to find the applicable terms.

  Additional terms@comma{} permissive or non-permissive@comma{} may be stated in the
form of a separately written license@comma{} or stated as exceptions;
the above requirements apply either way.

@enumerate
@item
Termination.
@end enumerate

  You may not propagate or modify a covered work except as expressly
provided under this License.  Any attempt otherwise to propagate or
modify it is void@comma{} and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).

  However@comma{} if you cease all violation of this License@comma{} then your
license from a particular copyright holder is reinstated (a)
provisionally@comma{} unless and until the copyright holder explicitly and
finally terminates your license@comma{} and (b) permanently@comma{} if the copyright
holder fails to notify you of the violation by some reasonable means
prior to 60 days after the cessation.

  Moreover@comma{} your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means@comma{} this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder@comma{} and you cure the violation prior to 30 days after
your receipt of the notice.

  Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated@comma{} you do not qualify to receive new licenses for the same
material under section 10.

@enumerate
@item
Acceptance Not Required for Having Copies.
@end enumerate

  You are not required to accept this License in order to receive or
run a copy of the Program.  Ancillary propagation of a covered work
occurring solely as a consequence of using peer-to-peer transmission
to receive a copy likewise does not require acceptance.  However@comma{}
nothing other than this License grants you permission to propagate or
modify any covered work.  These actions infringe copyright if you do
not accept this License.  Therefore@comma{} by modifying or propagating a
covered work@comma{} you indicate your acceptance of this License to do so.

@enumerate
@item
Automatic Licensing of Downstream Recipients.
@end enumerate

  Each time you convey a covered work@comma{} the recipient automatically
receives a license from the original licensors@comma{} to run@comma{} modify and
propagate that work@comma{} subject to this License.  You are not responsible
for enforcing compliance by third parties with this License.

  An ``entity transaction'' is a transaction transferring control of an
organization@comma{} or substantially all assets of one@comma{} or subdividing an
organization@comma{} or merging organizations.  If propagation of a covered
work results from an entity transaction@comma{} each party to that
transaction who receives a copy of the work also receives whatever
licenses to the work the party's predecessor in interest had or could
give under the previous paragraph@comma{} plus a right to possession of the
Corresponding Source of the work from the predecessor in interest@comma{} if
the predecessor has it or can get it with reasonable efforts.

  You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License.  For example@comma{} you may
not impose a license fee@comma{} royalty@comma{} or other charge for exercise of
rights granted under this License@comma{} and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that
any patent claim is infringed by making@comma{} using@comma{} selling@comma{} offering for
sale@comma{} or importing the Program or any portion of it.

@enumerate
@item
Patents.
@end enumerate

  A ``contributor'' is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based.  The
work thus licensed is called the contributor's ``contributor version''.

  A contributor's ``essential patent claims'' are all patent claims
owned or controlled by the contributor@comma{} whether already acquired or
hereafter acquired@comma{} that would be infringed by some manner@comma{} permitted
by this License@comma{} of making@comma{} using@comma{} or selling its contributor version@comma{}
but do not include claims that would be infringed only as a
consequence of further modification of the contributor version.  For
purposes of this definition@comma{} ``control'' includes the right to grant
patent sublicenses in a manner consistent with the requirements of
this License.

  Each contributor grants you a non-exclusive@comma{} worldwide@comma{} royalty-free
patent license under the contributor's essential patent claims@comma{} to
make@comma{} use@comma{} sell@comma{} offer for sale@comma{} import and otherwise run@comma{} modify and
propagate the contents of its contributor version.

  In the following three paragraphs@comma{} a ``patent license'' is any express
agreement or commitment@comma{} however denominated@comma{} not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement).  To ``grant'' such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.

  If you convey a covered work@comma{} knowingly relying on a patent license@comma{}
and the Corresponding Source of the work is not available for anyone
to copy@comma{} free of charge and under the terms of this License@comma{} through a
publicly available network server or other readily accessible means@comma{}
then you must either (1) cause the Corresponding Source to be so
available@comma{} or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work@comma{} or (3) arrange@comma{} in a manner
consistent with the requirements of this License@comma{} to extend the patent
license to downstream recipients.  ``Knowingly relying'' means you have
actual knowledge that@comma{} but for the patent license@comma{} your conveying the
covered work in a country@comma{} or your recipient's use of the covered work
in a country@comma{} would infringe one or more identifiable patents in that
country that you have reason to believe are valid.

  If@comma{} pursuant to or in connection with a single transaction or
arrangement@comma{} you convey@comma{} or propagate by procuring conveyance of@comma{} a
covered work@comma{} and grant a patent license to some of the parties
receiving the covered work authorizing them to use@comma{} propagate@comma{} modify
or convey a specific copy of the covered work@comma{} then the patent license
you grant is automatically extended to all recipients of the covered
work and works based on it.

  A patent license is ``discriminatory'' if it does not include within
the scope of its coverage@comma{} prohibits the exercise of@comma{} or is
conditioned on the non-exercise of one or more of the rights that are
specifically granted under this License.  You may not convey a covered
work if you are a party to an arrangement with a third party that is
in the business of distributing software@comma{} under which you make payment
to the third party based on the extent of your activity of conveying
the work@comma{} and under which the third party grants@comma{} to any of the
parties who would receive the covered work from you@comma{} a discriminatory
patent license (a) in connection with copies of the covered work
conveyed by you (or copies made from those copies)@comma{} or (b) primarily
for and in connection with specific products or compilations that
contain the covered work@comma{} unless you entered into that arrangement@comma{}
or that patent license was granted@comma{} prior to 28 March 2007.

  Nothing in this License shall be construed as excluding or limiting
any implied license or other defenses to infringement that may
otherwise be available to you under applicable patent law.

@enumerate
@item
No Surrender of Others' Freedom.
@end enumerate

  If conditions are imposed on you (whether by court order@comma{} agreement or
otherwise) that contradict the conditions of this License@comma{} they do not
excuse you from the conditions of this License.  If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations@comma{} then as a consequence you may
not convey it at all.  For example@comma{} if you agree to terms that obligate you
to collect a royalty for further conveying from those to whom you convey
the Program@comma{} the only way you could satisfy both those terms and this
License would be to refrain entirely from conveying the Program.

@enumerate
@item
Use with the GNU Affero General Public License.
@end enumerate

  Notwithstanding any other provision of this License@comma{} you have
permission to link or combine any covered work with a work licensed
under version 3 of the GNU Affero General Public License into a single
combined work@comma{} and to convey the resulting work.  The terms of this
License will continue to apply to the part which is the covered work@comma{}
but the special requirements of the GNU Affero General Public License@comma{}
section 13@comma{} concerning interaction through a network will apply to the
combination as such.

@enumerate
@item
Revised Versions of this License.
@end enumerate

  The Free Software Foundation may publish revised and/or new versions of
the GNU General Public License from time to time.  Such new versions will
be similar in spirit to the present version@comma{} but may differ in detail to
address new problems or concerns.

  Each version is given a distinguishing version number.  If the
Program specifies that a certain numbered version of the GNU General
Public License ``or any later version'' applies to it@comma{} you have the
option of following the terms and conditions either of that numbered
version or of any later version published by the Free Software
Foundation.  If the Program does not specify a version number of the
GNU General Public License@comma{} you may choose any version ever published
by the Free Software Foundation.

  If the Program specifies that a proxy can decide which future
versions of the GNU General Public License can be used@comma{} that proxy's
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.

  Later license versions may give you additional or different
permissions.  However@comma{} no additional obligations are imposed on any
author or copyright holder as a result of your choosing to follow a
later version.

@enumerate
@item
Disclaimer of Warranty.
@end enumerate

  THERE IS NO WARRANTY FOR THE PROGRAM@comma{} TO THE EXTENT PERMITTED BY
APPLICABLE LAW@.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM ``AS IS'' WITHOUT WARRANTY
OF ANY KIND@comma{} EITHER EXPRESSED OR IMPLIED@comma{} INCLUDING@comma{} BUT NOT LIMITED TO@comma{}
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE@.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
IS WITH YOU@.  SHOULD THE PROGRAM PROVE DEFECTIVE@comma{} YOU ASSUME THE COST OF
ALL NECESSARY SERVICING@comma{} REPAIR OR CORRECTION@.

@enumerate
@item
Limitation of Liability.
@end enumerate

  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER@comma{} OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
THE PROGRAM AS PERMITTED ABOVE@comma{} BE LIABLE TO YOU FOR DAMAGES@comma{} INCLUDING ANY
GENERAL@comma{} SPECIAL@comma{} INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS)@comma{}
EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
SUCH DAMAGES@.

@enumerate
@item
Interpretation of Sections 15 and 16.
@end enumerate

  If the disclaimer of warranty and limitation of liability provided
above cannot be given local legal effect according to their terms@comma{}
reviewing courts shall apply local law that most closely approximates
an absolute waiver of all civil liability in connection with the
Program@comma{} unless a warranty or assumption of liability accompanies a
copy of the Program in return for a fee.

END OF TERMS AND CONDITIONS

How to Apply These Terms to Your New Programs

  If you develop a new program@comma{} and you want it to be of the greatest
possible use to the public@comma{} the best way to achieve this is to make it
free software which everyone can redistribute and change under these terms.

  To do so@comma{} attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least
the ``copyright'' line and a pointer to where the full notice is found.

<one line to give the program's name and a brief idea of what it does.>
Copyright (C) <year>  <name of author>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation@comma{} either version 3 of the License@comma{} or
(at your option) any later version.

This program is distributed in the hope that it will be useful@comma{}
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE@.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not@comma{} see @uref{http://www.gnu.org/licenses/}.

Also add information on how to contact you by electronic and paper mail.

  If the program does terminal interaction@comma{} make it output a short
notice like this when it starts in an interactive mode:

<program>  Copyright (C) <year>  <name of author>
This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
This is free software@comma{} and you are welcome to redistribute it
under certain conditions; type `show c' for details.

The hypothetical commands `show w' and `show c' should show the appropriate
parts of the General Public License.  Of course@comma{} your program's commands
might be different; for a GUI interface@comma{} you would use an ``about box''.

  You should also get your employer (if you work as a programmer) or school@comma{}
if any@comma{} to sign a ``copyright disclaimer'' for the program@comma{} if necessary.
For more information on this@comma{} and how to apply and follow the GNU GPL@comma{} see
@uref{http://www.gnu.org/licenses/}.

  The GNU General Public License does not permit incorporating your program
into proprietary programs.  If your program is a subroutine library@comma{} you
may consider it more useful to permit linking proprietary applications with
the library.  If this is what you want to do@comma{} use the GNU Lesser General
Public License instead of this License.  But first@comma{} please read
@uref{http://www.gnu.org/philosophy/why-not-lgpl.html}.
@end copying

@dircategory Emacs
@direntry
* Dslide: (dslide).     A presentation framework.
@end direntry

@finalout
@titlepage
@title Domain Specific sLIDEs
@subtitle for version
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top Domain Specific sLIDEs
@end ifnottex

@menu
* Introduction::                 What is Dslide?
* Status::
* Glossary::                     Words We Invented
* Creating::                     Making Org Documents Into Presentations
* Presenting::                   Controlling the Presentation
* Configuring::                  Global Settings
* Extending::                    Custom Actions
* Hacking::                      Understanding the Guts
* Contributing::                 Give me hamburgers
* Acknowledgments::              Remembering Org Tree Slide
* Pronunciation::                Butcher it Right
* Indices::

@detailmenu
--- The Detailed Node Listing ---

Introduction

* Design Goals::                 Things Hopefully Achieved
* Strengths::                    When Dslide is Perfect

Glossary

* Org Mode Terms::               Ones You Might Not Know

Creating

* Actions::                      Overview
* Adding Actions::               Making Content Do Stuff
* Action Arguments::             Tweaking Behavior
* Annotating Elements::          Telling Actions What and Where
* Babel Scripting::              Fully Programmable Steps
* Hiding Markup::                No More Ugly
* Filtering Headings::           It's Not Done Yet
* Header Keywords::              Title, Author, Breadcumbs
* File Local Variables::         Don't Forget Free Lunch

Babel Scripting

* Step Callbacks::

Hiding Markup

* Hiding Todos and Tags::

Header Keywords

* Breadcrumbs::                  Showing Parent Headings

Presenting

* Two Button Interface::         Its All Forwards and Backwards
* Contents Interface::           Navigating Faster
* Narrating::                    And Debugging Live
* Cursor Visibility::

Configuring

* Binding::
* Hooks::
* Steezing Org::                 Making it Pretty

Binding

* Secondary Commands 🚧::

Hooks

* Per-Slide Actions::

Extending

* Creating Actions::             Overview
* A Custom Action::              Example Class
* Default Classes::              Overriding the Guts

Hacking

* Objects & Ownership::          What Holds What
* Stateful Sequence::            Most Important Interface
* Instantiating Slides::         Making Slides From Org Elements
* Display::                      Visual Things
* Element Mapping::              Working With Org Data
* Progress Tracking::            Markers and You

Objects & Ownership

* Life Cycles::                  What Lives When

Stateful Sequence

* Flow Control::                 Controlling Progress

Display

* Hiding::                       With Overlays
* Animation::                    Timers & Overlays
* Full Screen Images::           Image Mode Buffer

Contributing

* Work In Progress 🚧::

Work In Progress 🚧

* Affiliated Keyword::
* Layout::
* Slide Action Precedence::
* Secondary Commands::
* Starting From Point::
* Affiliated Buffers::
* Non-Graphic Display::
* Improper Levels::
* Counting Slides::
* Non-Org Sequences::

Indices

* Command and Function index::
* Concept index::
* Variable index::

@end detailmenu
@end menu

@node Introduction
@chapter Introduction

Dslide is designed for conducting presentations in Emacs.  Abstractly@comma{} a presentation is a scripted sequence of content.  Org mode documents are the primary means of encoding these sequences for dslide.

What dslide primarily adds to Emacs and Org Mode:

@itemize
@item
Simplified user interface suitable for a presentation remote controller
@item
Data model that adapts Emacs to this interface
@item
Method of attaching reusable@comma{} configurable programmed behavior to org mode content
@item
Extensible framework for creating custom programmed behavior
@item
Presenter tools such as viewing hidden content invisible to the audience
@end itemize

@menu
* Design Goals::                 Things Hopefully Achieved
* Strengths::                    When Dslide is Perfect
@end menu

@node Design Goals
@section Design Goals

Granular configurability was the first goal.  Dslide's predecessor@comma{} @code{org-tree-slide}@comma{} could only be configured at the level of the entire document@comma{} using customize variables.  Dslide aims to be configureable over each element of each heading.

Programmability quickly became primary motivation to develop dslide further.  Org babel blocks can be used as steps of a dslide presentation.  By scripting Emacs via Elisp within org babel blocks@comma{} because Emacs sits on top of all your other programming tools and sub-processes@comma{} so does dslide.  The action system is a framework for attaching reusable@comma{} configurable programmed behavior to multiple headings.

High productivity was another goal.  With a decent org configuration@comma{} use basic markup to obtain a decent presentation.  Org mode's properties and keywords are used to attach and configure reusable behavior to elements and headings.  Dslide respects export settings@comma{} allowing content to vary between presentation and export.  You can use the presentation org document itself the same way you use other org documents@comma{} to store@comma{} organize@comma{} and publish information.

@node Strengths
@section Strengths

Dslide is particularly good for presentations that are for internal use or intended for closed audiences@comma{} where lavish graphics that would be directed at end consumers is unneeded and could even be seen as an inappropriate expense of time:

@itemize
@item
Tech demos where you need programming tools
@item
Early stage startup pitches
@item
Conducting team meetings
@end itemize

@node Status
@chapter Status

@itemize
@item
Still pre-1.0.  See the @uref{https://github.com/positron-solutions/dslide/issues/20, version 1.0 feature roadmap}.
@item
Expect markup to become easier as affiliated keywords are adopted. Will attempt to not break options that currently work. See release notes when updating.
@item
Accepting PR's and issue reports. Read the manual section on @ref{Hacking, , hacking}
@item
Some behaviors may be advertised as working already when they are only 90% implemented. I have no idea what you want. File issues.
@end itemize

@node Glossary
@chapter Glossary

@itemize
@item
@samp{Deck}: an object that is used to relate the display and base buffer and is the root of all sequences.  It's another word for ``presentation'' or PT@.
@item
@samp{Slide}: an object that interprets an org heading to hydrate its actions
@item
@samp{Action}: an object that responds to @code{dslide-deck-forward} and @code{dslide-deck-backward} calls and implements lifecycle methods to initialize and clean up state.
@cindex slide action
@itemize
@item
@samp{Slide Action}: an action subclass that handles initial display of the slide and creation of child slides from sub-headings.
@end itemize
@cindex section action
@itemize
@item
@samp{Section Actions}: actions that typically control the display and behavior of a heading's section@comma{} the region between the headline and child headings.
@end itemize
@end itemize
@cindex secondary action
@itemize
@item
@samp{Secondary Action}: 🚧 To do ``something else'' besides step forwards and backwards@comma{} @code{dslide-deck-start} can be temporarily overloaded@comma{} allowing presentation controllers with three buttons to control extra behavior.
@item
@samp{Step}: a single call to @code{dslide-deck-foward} or @code{dslide-deck-backward}@comma{} usually delegated down to @code{dslide-forward} and @code{dslide-backward} methods through the deck and slides down to actions.  Actions implement steps.
@end itemize
@cindex element configuration
@itemize
@item
@samp{Element Configuration}: Some actions can be configured per-element.  This is done with an affiliated keyword such as @samp{#+attr_dslide_propertize:} or the parameters of a block.  The value is the configuration for how to work on that element.
@end itemize
@cindex step configuration
@itemize
@item
@samp{Step Configuration}: When the element configuration is used by a step.  The babel block parameters that configure how to use that block as a step are its step configuration.
@end itemize
@cindex contents
@itemize
@item
@samp{Contents}: A view of the folded top-level headings that is used for quickly navigating between headings during a presentation.
@end itemize
@cindex slide buffer
@itemize
@item
@samp{Slide Buffer}: the slides are shown in an indirect buffer that is cloned from your org document buffer.  The source is called the @strong{base buffer}.  Check for the @samp{deck: my-presentation.org} buffer name.
@itemize
@item
Indirect buffer and @samp{slide-buffer} are used interchangeably
@item
Base buffer or @samp{base-buffer} is used pretty exclusively
@end itemize
@item
@samp{Stateful Sequence}: @code{dslide-stateful-sequence} is an interface that other classes implement when they will receive delegated commands from the user.
@end itemize

@menu
* Org Mode Terms::               Ones You Might Not Know
@end menu

@node Org Mode Terms
@section Org Mode Terms

Select org mode terms more frequently used by dslide.  Don't miss @ref{Org Syntax,Org Syntax (org),,org,}.

@itemize
@item
@samp{Element}: org documents are parsed into elements and objects.  Headings@comma{} plain lists@comma{} and blocks are examples of elements.  See the @uref{https://orgmode.org/worg/dev/org-element-api.html, org element api} documentation.  Dslide makes heavy use of org's element parser to implement its features.
@item
@samp{Keyword}: A single @samp{#+keyword_style:} line used to specify some option
@item
@samp{Affilated keyword}: A @samp{#+attr_keyword_style:} line that directly precedes an element and is used to add metadata to arbitrary org elements.  It must begin with the @samp{attr} prefix! ⚠️
@item
@samp{Parameter}: Babel blocks have parameters.  Whenever an action works mainly on blocks@comma{} it can use parameters rather than affiliated keywords.
@item
@samp{Property drawer}: Used especially to configure a heading's slide action or how an action affects a heading element (affiliated keywords cannot apply to headings).  Can be used to configure section actions.
@item
@samp{Property}: Values in the property drawer.  Meta data attached to headings. See @ref{Property Syntax,Property Syntax (org),,org,}
@end itemize

@node Creating
@chapter Creating

Making an org document into a presentation.

@menu
* Actions::                      Overview
* Adding Actions::               Making Content Do Stuff
* Action Arguments::             Tweaking Behavior
* Annotating Elements::          Telling Actions What and Where
* Babel Scripting::              Fully Programmable Steps
* Hiding Markup::                No More Ugly
* Filtering Headings::           It's Not Done Yet
* Header Keywords::              Title, Author, Breadcumbs
* File Local Variables::         Don't Forget Free Lunch
@end menu

@node Actions
@section Actions

By default@comma{} you just get one slide per heading@comma{} a header@comma{} and some animation.  This is not very exciting.  You need to add actions to slides to consume their section content in a more engaging way.

There are two kinds of actions:
@itemize
@item
@samp{Slide actions}: mostly responsible for narrowing to a slide and then handling the child headings@comma{} either inline or as separate slides
@item
@samp{Section actions}: work on the content in the heading's section.
@end itemize

To browse all actions@comma{} because they are all EIEIO classes@comma{} you can use @code{eieio-browse} and see the actions descend from @code{dslide-action}.

@example
+--dslide-stateful-sequence
     +--dslide-action
          +--dslide-action-propertize
          +--dslide-action-image
          +--dslide-action-babel
          +--dslide-action-item-reveal
          +--dslide-action-hide-markup
          +--dslide-slide-action
               +--dslide-slide-action-every-child
               +--dslide-slide-action-inline
               +--dslide-slide-action-child
               +--dslide-slide-action-flat
@end example

@node Adding Actions
@section Adding Actions

@vindex dslide-default-actions
By default@comma{} every slide has two actions@comma{} configurable in @code{dslide-default-actions}:
@itemize
@item
@code{dslide-action-propertize} for adding text properties to arbitrary elements
@item
@code{dslide-action-hide-markup} to hide keywords@comma{} todo states@comma{} and tags@comma{} allowing you to have these things in your source without them cluttering the presentation
@end itemize

Non-default actions must be added to a slide using the slide's property drawer.  Actions that work by recognizing org elements by type are perhaps a bit dangerous to leave on all the time.

@itemize
@item
@samp{DSLIDE_SLIDE_ACTION}: Usually narrows to the slide and creates children from child headings.  Lifecycle encloses the section actions.
@item
@samp{DSLIDE_ACTIONS:} Most commonly used.  You can list multiple actions.  Each one will step through its forward and backward steps.
@end itemize

@example
* Full Screen Images
:PROPERTIES:
:DSLIDE_ACTIONS: dslide-action-images
:END:
#+attr_html: :width 50%
[[./images/emacsen4.jpeg]] [[./images/before-google3.jpeg]]
@end example

@node Action Arguments
@section Action Arguments

Many actions understand arguments@comma{} allowing tuning of similar behaviors from the same class.

To view an action's arguments@comma{} call @code{describe-symbol} on it.  Any slot definition usually has the same @samp{:initarg} and will be understood when added as a plist-style argument.

Configuring the slot is done by adding plist-style properties after the class name:

@example
:PROPERTIES:
:DSLIDE_ACTIONS: dslide-action-item-reveal :inline t
:END:
@end example

You can also use ``property+'' syntax to add to a property@comma{} and these accept plist arguments too:

@example
:PROPERTIES:
:DSLIDE_ACTIONS: dslide-action-babel
:DSLIDE_ACTIONS+: dslide-action-images :full-frame t
:END:
@end example

🚧 The current plist read implementation splits the string rather than using @code{read-string} and is therefore not smart enough to parse lists as arguments.  However @code{dslide-action-propertize} demonstrates doing this correctly and shows that it will be possible if needed.

@node Annotating Elements
@section Annotating Elements

Some actions@comma{} such as @code{dslide-action-propertize}@comma{} can't decide which elements to operate on or what to do with those elements.  You can add some meta data to an element using an @strong{affiliated keyword}.

⚠️ If you are extending an action and want to create your own affiliated keyword@comma{} they  must start with @samp{attr} or else the org element parser will not consider them affiliated and that property will not be set on the element!

@example
* Fancy Text
:PROPERTIES:
:DSLIDE_ACTIONS: dslide-action-propertize
:END:
Add text properties to an element using the =attr_dslide_propertize= affiliated keyword.  No quoting is required.  Lists will be interpreted as such.

#+attr_dslide_propertize: face (:background "#ddddff" :foreground "#000000" :weight bold :height 2.0)
This is some fancy text
@end example

@node Babel Scripting
@section Babel Scripting

@findex dslide-action-babel
@cindex scripting babel steps
You can write custom scripts into your presentation as Org Babel blocks.  These can be executed with the @code{dslide-action-babel} action.

In the future the babel action may become a default@comma{} using the @samp{#+attr_dslide_babel} affiliated keyword or @samp{:noeval} to decide a block should not be executed.  As of this version of dslide@comma{} either add @code{dslide-action-babel} to your @code{dslide-default-actions} or add it to the actions list via the property drawer.

@example
* My Heading With Babel Blocks
:PROPERTIES:
:DSLIDE_ACTIONS: dslide-action-babel
:END:
#+begin_src elisp
  (message "Good job!")
#+end_src
@end example

By default blocks only execute going forward@comma{} one block per step.  You need to label your blocks with @ref{Life Cycles, , lifecycle} methods if you want to perform setup (forward and backward) and teardown.  See the @code{dslide-action-babel} class and examples in @uref{./test/demo.org, ./test/demo.org}.

The @samp{#+attr_dslide:} affiliated keyword is used to configure which methods will run the block.  Block labels that are understood:

@itemize
@item
@samp{begin} and @samp{end} are run when the slide is instantiated@comma{} going forward and backward respectively.  You can have several blocks with these methods@comma{} and they will be run from @strong{top-to-bottom} always@comma{} making it easier to re-use code usually.

@item
@samp{final} is called to clean up when no progress can be made or if the presentation is stopped.

@item
@samp{forward} and @samp{backward} are self-explanatory.  Position your @samp{backward} blocks @strong{above} any block that they undo

@item
@samp{both} runs either direction.  It will not repeat in place when reversing.  Use separate @samp{forward} and @samp{backward} blocks for that 💡
@end itemize

These methods follow the naming and behavior of dslide's @ref{Stateful Sequence, , stateful sequence} interface.  The babel action is basically delegating stateful sequence calls into the blocks of your org document.

The babel action also understands regular babel options such as @samp{:exports} and @samp{:results}.  Exports none will make the block invisible.  Results controls whether results will be printed into the buffer or not.

@menu
* Step Callbacks::
@end menu

@node Step Callbacks
@subsection Step Callbacks

@findex dslide-push-step
@cindex pushing steps
See @code{dslide-push-step} for inserting arbitrary callbacks that can function as steps.  Unless your action performs state tracking to decide when to consume @code{dslide-deck-forward} and @code{dslide-deck-backward} itself@comma{} a callback may be easier.  Using @code{dslide-push-step} is also one way to optionally add a step callback from a babel block.

@node Hiding Markup
@section Hiding Markup

@findex dslide-action-hide-markup
@vindex dslide-hide-markup-types
Dslide uses a lot of markup that would not look good in a presentation.  It also filters it by default using @code{dslide-action-hide-markup}.  You can adjust the types using @code{dslide-hide-markup-types}

@menu
* Hiding Todos and Tags::
@end menu

@node Hiding Todos and Tags
@subsection Hiding Todos and Tags

@vindex dslide-hide-todo
@vindex dslide-hide-tags
@code{dslide-action-hide-markup} will also hide todos and tags.  You can modifiy this with @code{dslide-hide-todo} and @code{dslide-hide-tags}.

@node Filtering Headings
@section Filtering Headings

@cindex commented headings
@itemize
@item
Any heading with @samp{COMMENT} directly after the stars will be skipped
@item
Any heading with the @samp{:noslide:} or @samp{:noexport:} tags will be skipped
@end itemize

Use this when your headings are work-in-progress and you run out of time on Friday before the feature demo meeting.  Have some content that is only not used in presentations?  Use @samp{:noslide:}.

@vindex dslide-default-filter
To change the filtering from what is done by @code{dslide-built-in-filter}@comma{} customize @code{dslide-default-filter} or set @samp{DSLIDE_FILTER} (possibly implemented 🤡@comma{} file an issue!).

@node Header Keywords
@section Header Keywords

@vindex dslide-header
If @code{dslide-header} is configured@comma{} the keywords for the document title@comma{} email@comma{} and author etc will be used to generate an okay header.

@example
#+@comma{}#+title:        Domain Specific sLIDEs
#+author:        Positron
#+email:        contact@@positron.solutions
@end example

@vindex dslide-header-email
You can try customizing with @code{dslide-header-email} and similar variables or just set @code{dslide-header-fun} to complete replace the header with your own device.

@menu
* Breadcrumbs::                  Showing Parent Headings
@end menu

@node Breadcrumbs
@subsection Breadcrumbs

@vindex dslide-breadcrumb-separator
Whenever @code{dslide-breadcrumb-separator} is non-nil@comma{} breadcrumbs will be rendered in the heading@comma{} displaying parent headings so the audience an track context.

@vindex dslide-breadcrumb-face
Because breadcrumb text comes from your headings@comma{} you may want to set a face on them to prevent various heading faces from leaking into the breadcrumbs.

@node File Local Variables
@section File Local Variables

Don't forget that if you need a customize variable only set in a particular presentation@comma{} you can use file local variables.  Not every setting needs a keyword or babel block integration.

@example
# Local Variables:
# dslide-header: nil
# End:
@end example

@node Presenting
@chapter Presenting

How to control and view your presentation.

@menu
* Two Button Interface::         Its All Forwards and Backwards
* Contents Interface::           Navigating Faster
* Narrating::                    And Debugging Live
* Cursor Visibility::
@end menu

@node Two Button Interface
@section Two Button Interface

Presentations tend to be organized into a scripted linear sequence.  We want to control the entire presentation sequence mostly with two buttons@comma{} forwards and backwards.

The controllers for presenting usually have very few buttons.  Dslide was designed with this usage pattern in mind and can mostly be controlled by two commands.

@findex dslide-deck-forward
@itemize
@item
@code{dslide-deck-forward}
@end itemize
@findex dslide-deck-backward
@itemize
@item
@code{dslide-deck-backward}
@end itemize

@findex dslide-deck-start
Many controllers also have a ``play'' button or similar.  It's recommended to map this to @code{dslide-deck-start}.

@cindex secondary action
🚧 It is intended to overload @code{dslide-deck-start} further to implement ``secondary'' actions that can be triggered non-linearly.

@findex dslide-deck-stop
There is likely no good place to bind @code{dslide-deck-stop}@comma{} but it's not critical.  You can do everything with just three buttons.

@node Contents Interface
@section Contents Interface

Navigate your presentation faster when answering questions.  The contents interface is a view of top-level headings.  It overloads the presentation controls to navigate.

To enter the contents@comma{} call @code{dslide-deck-start} when a presentation is already active.

@itemize
@item
@code{dslide-deck-start} will resume the presentation at that heading
@item
@code{dslide-deck-stop} will similarly exit the contents view
@item
@code{dslide-deck-forward} and @code{dslide-deck-backward} move between top level headings.
@end itemize

@node Narrating
@section Narrating

The presentation you see is a cloned @ref{Indirect Buffers,indirect buffer,,elisp,} of your org mode buffer. The Elisp state and overlays are independent. There are two key advantages:

@itemize
@item
Any state you create in the presentation (besides buffer text and text properties!) will not pollute the org mode buffer you are editing
@item
We can display the source for the presentation simultaneously@comma{} making one pretty while leaving the other to show us what is hidden
@end itemize

@findex dslide-deck-develop
@code{dslide-deck-develop} will attempt to display both the presentation and source simultaneously.  Whenever the source is visible@comma{} highlights will be applied to indicate where the presentation is at.  @strong{This is especially helpful for including presentation notes in comments@comma{} which are hidden by default}.

To leave a comment for yourself in the presentation source@comma{} just add a comment block or comment line:

@example
# This is also a comment

#+begin_comment
This is a comment that only I can see while presenting@comma{} only when I look at my base buffer while sharing another frame.
#+end_comment
@end example

You can also switch a window to the base buffer manually.  That's almost all @code{dslide-deck-develop} does.

@node Cursor Visibility
@section Cursor Visibility

@findex dslide-cursor-hide
@findex dslide-cursor-restore
By default@comma{} the cursor is hidden in the presentation buffer using @code{dslide-cursor-hide}.  You can call @code{dslide-cursor-restore} if you need it.

@node Configuring
@chapter Configuring

Be sure to check @samp{M-x} @code{customize-group} @samp{dslide} to see all declared custom variables. All of the variables are configured to recommended defaults except hooks@comma{} which would depend on other packages usually.

Many settings can be configured at:
@itemize
@item
global level through customize variables
@item
document level through keywords
@item
slide level through the property drawer
@end itemize

@menu
* Binding::
* Hooks::
* Steezing Org::                 Making it Pretty
@end menu

@node Binding
@section Binding

You likely want to start the mode via @code{dslide-deck-start}.  Once the mode starts@comma{} it creates an indirect buffer to display the slides and then calls @code{dslide-deck-start-function} once the mode is active and everything is initialized@comma{} so you can customize startup behavior.

All commands begin with @code{dslide-deck} 💡
@lisp
(keymap-set org-mode-map "<f5>" #'dslide-deck-start)
@end lisp
Once the global minor mode@comma{} @code{dslide-mode} is active@comma{} additional bindings in @code{dslide-mode-map} are active in every buffer so that you can integrate other buffers into your presentation.  (Tracking which buffers are part of a presentation is  still a topic under consideration 🚧)

@menu
* Secondary Commands 🚧::
@end menu

@node Secondary Commands 🚧
@subsection Secondary Commands 🚧

Because you might want to play a video or take a branch in the presentation and then exit that branch@comma{} the plan is to overload the @code{dslide-deck-start} binding within presentations to enter / exit these branches.

@node Hooks
@section Hooks

Beware of using the normal @code{dslide-mode-hook} 😱 because it runs @strong{in the base buffer} ⚠️.  If you use that hook to remap faces or add a bunch of styling@comma{} state will be copied to the indirect buffer but then linger in your base buffer.  Instead@comma{} use @code{dslide-start-hook}. 💡

@itemize
@item
@code{dslide-start-hook} is run in the indirect buffer after it is set it.  This is what you want.
@item
@code{dslide-stop-hook} is run in the base buffer because the indirect buffer is already dead.
@item
@code{dslide-contents-hook} is run after switching to contents.  It runs in the slide buffer.
@item
@code{dslide-narrow-hook} is run after narrowing@comma{} usually after a slide is started
@item
@code{dslide-after-last-slide-hook} is run when the user tries to go forward but there are no more slides.  You can use this to implement a final feedback before quitting or add @code{dslide-deck-stop} to exit without feedback.

Another option is to use @code{dslide-push-step} to push a callback that will only run when called going forward.
@end itemize

@lisp
(defun my-stop-if-forward ()
  (dslide-push-step (lambda (direction)
                  (when (eq direction 'forward)
                    ;; Be sure to return t or the callback won't count as a
                    ;; step and the hook will run again.
                    (prog1 t (dslide-deck-stop))))))

(setq dslide-after-last-slide-hook #'my-stop-if-forward)
@end lisp

@menu
* Per-Slide Actions::
@end menu

@node Per-Slide Actions
@subsection Per-Slide Actions

💡 If you want to do something on each slide or specific slides@comma{} before using hooks@comma{} instead consider using actions.

See the @code{dslide-action-hide-markup} which is by default added to @code{dslide-default-actions} and hides markup on every slide.  The lifecycle of actions and their methods for obtaining the current slide's heading make them very good for per-slide behavior.

@node Steezing Org
@section Steezing Org

This is not unique to dslide@comma{} but if you want more professional looking results@comma{} you will likely need to make your org a bit prettier.

The setup used for the Positron's YouTube demos is not much more complex than this well-documented setup by @uref{https://systemcrafters.net/emacs-tips/presentations-with-org-present/, System Crafters}.  Also see Prot's @uref{https://protesilaos.com/codelog/2020-07-17-emacs-mixed-fonts-org/, further} documentation on customizing org mode faces and fonts.

In short@comma{} use:
@itemize
@item
@code{org-modern}
@item
@code{org-appear}
@item
@code{nerd-icons} for more cheesy (Emacs logo)
@item
And set the faces for org headings and document title.
@end itemize

Don't forget built-in @code{emoji-search} and searching @code{insert-char}.

Positron is cheating and also apply custom line-spacing and line-height.  While Psionic maintains a custom @code{org-modern}@comma{} using custom spacing everywhere fights with @code{visual-line-mode} currently.

@node Extending
@chapter Extending

Creating new actions or replacing dslide classes.

@menu
* Creating Actions::             Overview
* A Custom Action::              Example Class
* Default Classes::              Overriding the Guts
@end menu

@node Creating Actions
@section Creating Actions

Actions are the right choice when you need custom behavior that you want to re-use.  Actions can be configured with arguments.  They implement the stateful sequence lifecycle.  For one-off solutions@comma{} you probably just want a babel block.

First choose your action type:

@findex dslide-action
@itemize
@item
Override @code{dslide-action} to create an action that works mainly on a heading's section content.
@end itemize
@findex dslide-slide-action
@itemize
@item
Override @code{dslide-slide-action} to create a slide action.  Your action will control the display of the slide and its children@comma{} usually controlling the narrow state and adding or removing overlays from children.
@end itemize

Override methods as appropriate@comma{} configure a heading to use your action@comma{} and you're done.  Some actions@comma{} such as @code{dslide-action-propertize} only work when some of the section data is annotated.

@node A Custom Action
@section A Custom Action

@findex dslide-section-next
@findex dslide-section-previous
The @code{dslide-section-next}  and @code{dslide-section-previous} method documentation are very helpful behavior for quickly writing custom actions.  They advance the action's @samp{:marker} forwards and backwards to the next matching element and return that element so we can do something with it.

@itemize
@item
declare a class
@item
override a few methods
@item
now you too can paint the paragraphs red
@end itemize

Example code:

@lisp
(defclass dslide-action-red-paragraphs (dslide-action)
  ((overlays :initform nil))
  "Paint the paragraphs red@comma{} one by one.")

;; Default no-op `dslide-begin' is sufficient

;; Default implementation of `dslide-end'@comma{} which just plays forward to the end@comma{}
;; is well-behaved with this class.

;; Remove any remaining overlays when calling final.
(cl-defmethod dslide-final :after ((obj dslide-action-red-paragraphs))
  (mapc #'delete-overlay (oref obj overlays)))

;; Find the next paragraph and add an overlay if it exists
(cl-defmethod dslide-forward ((obj dslide-action-red-paragraphs))
  (when-let ((paragraph (dslide-section-next obj 'paragraph)))
    (let* ((beg (org-element-property :begin paragraph))
           (end (org-element-property :end paragraph))
           (new-overlay (make-overlay beg end)))
      (overlay-put new-overlay 'face 'error)
      (push new-overlay (oref obj overlays))
      ;; Return non-nil to indicate progress was made.  This also informs the
      ;; highlight when following the slides in the base buffer.
      beg)))

(cl-defmethod dslide-backward ((obj dslide-action-red-paragraphs))
  (when-let* ((overlay (pop (oref obj overlays))))
    (delete-overlay overlay)
    ;; If there is a preceding overlay@comma{} move to its beginning else move to the
    ;; beginning of the heading.
    (if-let ((overlay (car (oref obj overlays))))
        (dslide-marker obj (overlay-start overlay))
      (dslide-marker obj (org-element-property :begin (dslide-heading obj))))))
@end lisp

@node Default Classes
@section Default Classes

The deck and slide class as well as actions can be sub-classed.  Use the existing sub-classes of actions as example code for writing other classes.  See the @ref{Top,eieio#Top,,eieio,} manual for explanation of OOP in Elisp.

@itemize
@item
@samp{Action}:  Creating new action subclasses are an efficient way to perform similar operations on typical kinds of org data.
@item
@samp{Slide:}  Slides can be configured extensively by changing their actions.  However@comma{} for more vertical cooperation between slides or cooperation among actions@comma{} extended slides could be useful.
@item
@samp{Deck}:  If the core methods of the deck are insufficient@comma{} extension is another option besides advice@comma{} hooks@comma{} and modifying the source.

If you suspect you might need to sub-class the @code{dslide-slide} or @code{dslide-deck}@comma{} please file an issue because your use case is probably interesting.
@end itemize

@node Hacking
@chapter Hacking

This section provides really high-level summary of the code's major design choices to prepare for diving into source.

@menu
* Objects & Ownership::          What Holds What
* Stateful Sequence::            Most Important Interface
* Instantiating Slides::         Making Slides From Org Elements
* Display::                      Visual Things
* Element Mapping::              Working With Org Data
* Progress Tracking::            Markers and You
@end menu

@node Objects & Ownership
@section Objects & Ownership

Org mode uses trees.  Presentations are linear sequences.  We can either traverse the tree or flatten it.  Dslide chose to traverse.  This design allowed implementing features such as @code{dslide-slide-action-each-child}.  The children of such a parent slide exist simultaneously.  A consequence of the choice not to flatten is that parents own their children.  The lifecycle of a parent always encompasses its child.

@itemize
@item
The deck object is the root of all functionality and many commands delegate through it
@item
The deck owns slides@comma{} which own actions
@item
Slide actions may further own child slides
@end itemize

@menu
* Life Cycles::                  What Lives When
@end menu

@node Life Cycles
@subsection Life Cycles

Owning an object also means out-living it.  This is important to understanding the sequence of events.  The methods used for the lifecycle are part of dslide's @ref{Stateful Sequence, , Stateful Sequence}.  Every lifecyle starts with @code{dslide-begin} or @code{dslide-end} (depending on whether we go forward or backward) and ends with @code{dslide-final}.

The state of the slide out-lives the state of its slide action.  The slide action out-lives both child slides and section actions.  Child slides and section actions life cycles may overlap.

The child and section actions orders can vary depending on the slide action's choices.  There may be multiple children alive at one time.  The children may complete after@comma{} before@comma{} or at the same time as the section actions.

@strong{Going forward:}

@enumerate
@item
slide @code{dslide-begin}
@item
slide action @code{dslide-begin}
@item
section actions + child slides @code{dslide-begin}
@item
section actions + child slides @code{dslide-final}
@item
slide action @code{dslide-final}
@item
slide @code{dslide-final}
@end enumerate

@strong{Going backward:}

@enumerate
@item
slide @code{dslide-end}
@item
slide action @code{dslide-end}
@item
child slides + section actions @code{dslide-end}
@item
child slides + section actions @code{dslide-final}
@item
slide action @code{dslide-final}
@item
slide @code{dslide-final}
@end enumerate

@node Stateful Sequence
@section Stateful Sequence

@findex dslide-stateful-sequence
@findex dslide-forward
@findex dslide-backward
Presentations are supposed to be linear sequences.  We want to traverse the sequence@comma{} performing the steps@comma{} entirely by calling @code{dslide-forward} and @code{dslide-backward}.

If all sequences were idempotent@comma{} we would only implement @code{dslide-forward} and @code{dslide-backward}.  However@comma{} sequences often require setup and teardown before carrying out a single step.  This is the ``stateful'' part.

Implementing this without explicit setup methods crammed too much behavior into @code{dslide-forward} and @code{dslide-backward} while also requiring them to decide if they were attempting to make progress or just performing setup.  It was annoying when building actions.

@findex dslide-begin
@findex dslide-end
Setup and teardown can happen in both directions@comma{} so there is @code{dslide-begin} and @code{dslide-end}.  The latter commonly calls the former and then advances the state to the end@comma{} but some more optimal setups are possible and already in use.

@findex dslide-final
Slides may be disposed of after they no longer make progress.  To allow intended cleanup to happen at the right moment@comma{} the parent calls @code{dslide-final}.  This can be called at any time after @code{dslide-end} or @code{dslide-begin}.

The return values for these methods matter!  See @ref{Flow Control, , flow control}.

@menu
* Flow Control::                 Controlling Progress
@end menu

@node Flow Control
@subsection Flow Control

Decks@comma{} slides@comma{} and actions implement the @code{dslide-stateful-sequence} interface.  On each call to @code{dslide-deck-forward} or @code{dslide-deck-backward}@comma{} the deck receives the first call to its @code{dslide-forward} method.  First@comma{} the deck will check for any step callbacks.  (These may be added with @code{dslide-push-step} in actions or babel blocks.)  If there are no step callbacks@comma{} the deck delegates @code{dslide-forward} to the slide.  The slide may delegate down to an action@comma{} which may then further delegate to a child slide and so on.  Eventually@comma{} an action will implement the step.

@cindex controlling progress
The return value tells the parent if progress was made.  In the most basic case@comma{} each delegate will try all of its actions until one returns non-nil.  The delegate returns the first non-nil result.  If the delegate returns nil@comma{} it means it was unable to make progress@comma{} and so the caller will instead try its own next action.  The deck will find a root level sibling and hydrate it using @code{dslide--make-slide}.  A child action would find the next child and hydrate that.

The moment of calling @code{dslide-final} can vary depending on the situation.  If there is only one slide at a time@comma{} @code{dslide-final} is usually called right after the child returns nil.  If the child is one of several@comma{} such as with @code{dslide-slide-action-inline}@comma{} then only after all children complete will they have their @code{dslide-final} called.  If the presentation is quit early or the contents are opened@comma{} @code{dslide-final} is also called@comma{} possibly before all steps are complete.

Whenever all slides and actions return nil all the way back up to the deck@comma{} it looks for a next or previous top-level heading to make into a slide.  If none is found@comma{} it indicates that the user is at the beginning or end of the presentation.

The deck object and slide actions frequently create new children from org headings.  They call their @code{dslide-begin} or @code{dslide-end} methods right after that.  If these methods don't indicate progress@comma{} the @code{dslide-forward} or @code{dslide-back} method will be called.

@node Instantiating Slides
@section Instantiating Slides

@findex dslide--make-slide
Slides are created by calling @code{dslide--make-slide} with an org element for a heading.  This function interprets the class name and arguments for the new slide and instantiates the object.

The default classes and actions can be configured at the document or customize level.  Set the @samp{DSLIDE_DECK_CLASS} and @samp{DSLIDE_SLIDE_CLASS} as well as other properties that work at the heading level.  The order of precedence (@strong{Not fully implemented} 🚧):

@itemize
@item
Property definition of the current heading
@item
Property definition in the document
@item
Customize variable
@end itemize

@code{dslide--make-slide} will look in order for the highest precedence setting and then instantiate the class with that value in the slot.

@node Display
@section Display

How various visual effects are achieved.

@menu
* Hiding::                       With Overlays
* Animation::                    Timers & Overlays
* Full Screen Images::           Image Mode Buffer
@end menu

@node Hiding
@subsection Hiding

The slide buffer@comma{} being an indirect clone of the base buffer@comma{} does not have independent text properties. For this reason@comma{} overlays are typically used to hide content.

Most things that are hidden could be once again revealed.  This is typically accomplished by mutating or deleting the overlay.

@node Animation
@subsection Animation

There are currently two animation types@comma{} peel and slide-in:

@itemize
@item
Peel uses an overlay that is removed from the content one character at a time.  In order to preserve the flow of the obscured contents@comma{} such as when doing inline reveal with content after the reveal@comma{} the overlay must either match the background color or use the display property.
@item
Slide-in uses an overlay with a @samp{:before-string} text property to insert a newline in order to use the @samp{:line-height} property to slowly remove padding with a timer.
@end itemize

Peel is the default when an action or slide's @samp{:inline} property is non-nil.  If multiple actions try to slide in at once@comma{} the result will not be good.  This is visible when combining @code{dslide-slide-action-every-child} and @code{dslide-action-item-reveal}

@node Full Screen Images
@subsection Full Screen Images

These are just image buffers with the mode line turned off.

@node Element Mapping
@section Element Mapping

Org's Element API is the foundation on top of which dslide is built.  It's documentation is not currently in a manual.  Here's the web link:  @uref{https://orgmode.org/worg/dev/org-element-api.html, Org Element API docs}.  By using the element parser@comma{} we can avoid the issues that plague regex based implementations.  (The trade-off is more garbage generation.)

Very frequently@comma{} we parse a section of the document and map over elements or headings within.  This allows us to treat the document or a part of it as a list.  The mapping functions all eventually delegate to @code{dslide--map} which itself uses @code{org-element-map}@comma{} narrowed to the targeted region.

It is very common when writing actions to work on only the section or only the children.  For this reason@comma{} some shortcuts to map the section or children exist.  Some section actions such as @code{dslide-action-hide-markup} are almost entirely built @code{on dslide-section-map}.

Frequently we are looking for an element before or after a marker@comma{} so shortcuts exist for finding the next or previous element.  Section actions typically use @code{dslide-section-next} and @code{dslide-section-previous}.  Slide actions typically use @code{dslide-child-next} and  @code{dslide-child-previous} to traverse the child headings.

Mapping and @ref{Progress Tracking, , progress tracking} are intimately related.  Finding the previous or next element is implemented by mapping to find the element beginning before or after a certain point.  Careful handling of markers and a consistent scheme for sensing progress enable markers in the buffer to act as progress cursors for a variety of actions.

@node Progress Tracking
@section Progress Tracking

@findex dslide-heading
Dslide's predecessor@comma{} org-tree-slide@comma{} frequently used the point to track state.  This can be fragile and there is also only one point.  To be more robust when the document is changing out from under us@comma{} dslide uses markers.

@findex dslide-section-next
@findex dslide-section-previous
Slides keep a reference to the heading in their @samp{:begin} slot and then retrieve it using @code{org-element-at-point}.  Actions similarly use a marker in order to keep track of how much of the current heading they have already used.  For convenience@comma{} @code{dslide-section-next} and @code{dslide-section-previous} are used to simultaneously find the next element and update the marker@comma{} eliminating silly mistakes like forgetting to update the marker.

@cindex reversing in place
There are two schemes in place for tracking progress:

@itemize
@item
When viewing a sequence of images@comma{} we reverse by going back to the previous image rather than re-showing the current image.  This is the default progress scheme.
@item
When showing and hiding elements@comma{} we reverse undoing the most recent work.  This means hiding the most recently shown or showing the most recently hidden element.  This is the scheme used when REVERSE-IN-PLACE is non-nil.
@end itemize

⚠️ This section is fiddly and tricky.  Put on your smarty hat.  👷

@strong{Normal Progress}

In short@comma{} find the element beginning after (before in reverse) the marker@comma{} move the marker to its beginning@comma{} and work on that element.  If there is no next element@comma{} move as far as you can.

@itemize
@item
The heading always begins before the first element.  We can reliably position before all elements by putting the marker at the beginning of the heading.
@item
To go forward@comma{} we find the first element beginning after the marker and move the marker to its beginning.  We work on that element.  It will be skipped if we immediately go backward again.
@item
If there is no next element@comma{} we move the marker to the end of the heading@comma{} which is after the beginning of the last element.
@item
To go backward@comma{} we find the first element beginning before the marker and move the marker to its beginning.  We work on that element.  It will be skipped if we immediately go forward again.
@end itemize

@strong{Reverse In Place Progress}

If doing work means the next reverse step should undo that work@comma{} you need reversing in place.  We need to slightly tweak our rules to allow two states on each element.  Since every element ends after it begins@comma{} we can reliably use the end and beginning positions to differentiate if we already used an element when going forwards or backwards.

A very deliberate design choice was to avoid needing to return more than one element from a mapping call.  This means we always want to find the element we intend to work on e.g. we do not want to find the element to work on and then have to find the next element to update the marker.

@itemize
@item
To go forward@comma{} we find the first element beginning at or after the marker.  We move the marker to the end of this element and work on this element.
@item
To go backward@comma{} we find the first element ending at or before the marker.  We move the marker to the beginning of this element and work on this element.
@item
Going forward@comma{} begin at the beginning of the heading just like normal progress.  The first element will not be skipped.
@item
Going backward@comma{} begin at the end of the heading.  This is at most the end of the last element@comma{} so it won't be skipped.
@end itemize

☢️ Before these two schemes were developed@comma{} some actions were easier to implement one way while others were easier the other way.  There was much flip-flopping and radiation sickness from broken actions.  Eventually it was realized that both schemes make perfect sense for the right problems.

⚠️ Org elements can and do overlap.  Lists are one such challenge.  List elements can all end at the same location.  Naively calling @code{org-element-at-point} is a bad idea.  See @code{dslide-action-item-reveal} for higher level interfaces.

If you need more states per element@comma{} this kind of implicit state tracking is insufficient and you will have to implement state-tracking.  ⚠️  Don't use text properties to store state in buffer text since they will persist in the base buffer between presentation starts if not cleaned up.

@node Contributing
@chapter Contributing

@itemize
@item
Since you likely just need something to magically happen@comma{} the recommended option is to place a hamburger in the @uref{https://github.com/sponsors/positron-solutions, hamburger jar} and file an issue.
@item
If you do have time@comma{} excellent.  Happy to support your PR's and provide context about the architecture and behavior.
@end itemize

@menu
* Work In Progress 🚧::
@end menu

@node Work In Progress 🚧
@section Work In Progress 🚧

Open issues and give feedback on feature requests.  Contributions welcome.  See the @uref{https://github.com/positron-solutions/dslide/issues/20, 1.0 feature roadmap}.

@menu
* Affiliated Keyword::
* Layout::
* Slide Action Precedence::
* Secondary Commands::
* Starting From Point::
* Affiliated Buffers::
* Non-Graphic Display::
* Improper Levels::
* Counting Slides::
* Non-Org Sequences::
@end menu

@node Affiliated Keyword
@subsection Affiliated Keyword

This is the future of dslide.  Currently adding behavior to content can frequently require adding actions to the property drawer and then adding a keyword to the content.  This lacks precision@comma{} is unintuitive@comma{} and is inconvenient.  @code{dslide-action-propertize} shows the way.  A dispatch system should find all @samp{dslide} prefixed affiliated keywords and activate the actions with the configuration.  This is faster and more concise.  It only requires editing in one place rather than two.

The property drawer will remain in use because headings have slide behavior that doesn't make sense to adjust with affiliated keywords.  For behavior affecting section elements or operating on objects within paragraphs@comma{} the affiliated keyword implementation is the right way.

@node Layout
@subsection Layout

The @code{master-of-ceremonies} package and its @code{mc-focus} command implement desirable behaviors such as filling the available space and padding the content to the center of the window.  This behavior could easily be improved and adapted into an action.

@node Slide Action Precedence
@subsection Slide Action Precedence

When a slide is created in @code{dslide-make-slide}@comma{} it can obtain them from several places:
@itemize
@item
passed in arguments@comma{} as slide actions do to prevent children from trying to display themselves
@item
properties@comma{} how slides are usually configured
@item
customize variables that set the default actions.
@end itemize
The order of precedence and capability to override options is still pretty immature.

@node Secondary Commands
@subsection Secondary Commands

See the section about bindings for context.  Video play or other situations where the presentation might branch should be supported by overloading the behavior of @code{dslide-deck-start}.  I think this command will turn into @code{dslide-deck-secondary} in the @code{dslide-mode-map}.

@node Starting From Point
@subsection Starting From Point

Since not many actions currently have implemented @code{dslide-goto} very accurately@comma{} playing from point is likely not that accurate.  Progress updating in the base buffer is also currently only at the slide level of granularity.

@node Affiliated Buffers
@subsection Affiliated Buffers

There is no tracking whether a buffer is part of the presentation or not.  How would a buffer become one?  Should it be implicit?  Without any sort of tracking@comma{} the consequence is that having a presentation open leaves the minor mode bindings hot.  These commands do weird things when run from these situations@comma{} especially if running babel scripts@comma{} so some kind of first-class buffer affiliation seems necessary.

@node Non-Graphic Display
@subsection Non-Graphic Display

For terminals@comma{} the line-height based slide-in effect is not supported.

@node Improper Levels
@subsection Improper Levels

Children with no parents or missing a level are currently not supported and likely cause bad behavior.

@node Counting Slides
@subsection Counting Slides

Especially if slides launch sub-sequences@comma{} and they do it from Lisp@comma{} this is hard.  Buffer slides and also slide actions make it somewhat ambiguous.  Counting trees or tracking the point might be easier.  A @code{children} method for sequences works as long as sequences actually implement it.

@node Non-Org Sequences
@subsection Non-Org Sequences

There's no concrete reason why presentations need to start with Org mode buffers.  The deck object could have its org-specific functionality pushed down to an org-mode class.  The only requirement is to be able to hydrate some stateful sequences@comma{} which may hydrate and call into sub-sequences@comma{} meaning anything is pretty trivially possible.

@node Acknowledgments
@chapter Acknowledgments

This package is a direct descendant of Takaaki ISHIKAWA's @uref{https://github.com/takaxp/org-tree-slide, org-tree-slide} package.  Many of the ideas and some of the implementations were either inherited or inspired by ideas from that package.  This package would not exist without the inspiration.  Thanks to everyone who contributed on org-tree-slide.

@node Pronunciation
@chapter Pronunciation

While it may have been spoken many times before@comma{} let it be official that there is no correct way to pronounce DSL IDE@.  Here are some options:

@itemize
@item
D-S-L I-D-E: as if it is an IDE for designing DSLs@comma{} clearly false and pretentious sounding@comma{} but those who keep score lose for being too anxious to win
@item
D'slide: perhaps@comma{} ``the slide''
@item
DEEE slide: We are going un-slide your slides.  Powerpoint is no more.  Emacs has triumphed over the board room at last
@end itemize

Please spread these and other intentionally wrongful pronunciations to protect those who have only ever read the name from persecution by self-annointed in-groups who claim to know the correct way to pronounce this made up word.

@node Indices
@chapter Indices

@menu
* Command and Function index::
* Concept index::
* Variable index::
@end menu

@node Command and Function index
@section Command and Function index

@printindex fn

@node Concept index
@section Concept index

@printindex cp

@node Variable index
@section Variable index

@printindex vr

@bye
