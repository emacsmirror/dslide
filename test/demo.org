#+title:	Domain Specific sLIDEs
#+author:	Positron
#+email:	contact@positron.solutions

* Start
1. Run =M-x= ~dslide-deck-start~.
2. Press the right arrow key ‚û°Ô∏è
** Controls
:PROPERTIES:
:DSLIDE_ACTIONS: dslide-action-item-reveal
:END:
See the ~dslide-mode-map~ but basically, arrow keys.
- right arrow ‚û°Ô∏è ~dslide-deck-forward~
- left arrow  ‚¨ÖÔ∏è ~dslide-deck-backward~
- up arrow    ‚¨ÜÔ∏è ~dslide-deck-start~ (default secondary action shows contents)
- down arrow  ‚¨áÔ∏è ~dslide-deck-stop~
*** Contents View
:PROPERTIES:
:DSLIDE_ACTIONS: dslide-action-item-reveal
:END:
After a presentation is started, up arrow ‚¨ÜÔ∏è goes to the contents view.

Inside the contents view:
- up arrow    ‚¨ÜÔ∏è goes back to the slides
- down arrow  ‚¨áÔ∏è will quit the presentation
- left arrow  ‚¨ÖÔ∏è navigates to previous root heading
- right arrow ‚û°Ô∏è navigates to the next root heading
* Follow Along
This presentation is shown in an *indirect buffer*.  See the mode line.  The buffer name should be =deck: demo.org= or something similar.

Split the window =C-x 3= or ~split-window-right~ and switch to the base buffer, =demo.org=

When you advance with ~dslide-deck-forward~, you can see the presentation's progress point highlighted in the base buffer.  This makes it easier to debug babel blocks and other actions.

You can start the presentation this way by using ~dslide-deck-develop~ instead.
** Progress Highlights
Be sure to customize the faces used for highlighting progress and babel block execution:
- ~dslide-highlight~
- ~dslide-babel-sucess-highlight~
- ~dslide-babel-fail-highlight~
You probably want to define these in your theme, using ~set-face-attribute~.
* Inline Children
:PROPERTIES:
:DSLIDE_SLIDE_ACTION: dslide-slide-action-inline
:END:
- You won't believe these animations
- This is the world's greatest presentation software
  + But mainly because it integrates with all you programming tools
** Pen üñäÔ∏è
Information, you have to breathe it in
** Pineapple üçç
Isn't this animation so cool?
** Apple üçé
This is a reason to be alive
** Pen üñäÔ∏è
[[https://www.youtube.com/watch?v=Ct6BUPvE2sM][In case you live under a rock]]
* Breadcrumbs
This information goes deep.  To customize breadcrumb appearance, check out ~dslide-breadcrumb-face~.
** Deep
And it will go deeper still yet
*** Deeper
The rabbit hole has only the bounds of your imagination
**** Deepest?
Wow, these breadcrumbs are very high-carb
***** Okay Deep Enough!
How many levels of headings could there be?
* Flat Slide
:PROPERTIES:
:DSLIDE_SLIDE_ACTION: dslide-slide-action-flat
:END:
This slide shows its child headings inline.
- The slide action shows the entire contents, not just the section
- There is no child action
** Blue Team
- Has to do all the work
- Must create an air-tight submarine
** Red Team
- Uses some metasploit and calls it a day
- Failure is an option
* Reveal Items
:PROPERTIES:
:DSLIDE_ACTIONS: dslide-action-item-reveal
:END:
Positron is deeply committed to bringing you the finest in:
- Pen üñäÔ∏è
- Pineapple üçç
- Apple üçé
- Pen üñäÔ∏è
* Image Slides
:PROPERTIES:
:DSLIDE_ACTIONS: dslide-action-image
:END:
- The action will automatically turn on inline images so you don't have to remember to run ~org-toggle-inline-images~.
- The image buffer is configured to act as a slide, so it still responds to the keybindings.
- See more options, such as fullscreen etc by calling ~describe-symbol~ on ~dslide-action-image~
#+ATTR_HTML: :width 45%
 [[./images/emacsen4.jpeg]] [[./images/self-care5.jpeg]]
#+ATTR_HTML: :width 45%
 [[./images/before-google3.jpeg]] [[./images/all-software-is-the-same-with-tang.jpeg]]
* No Header Slide
:PROPERTIES:
:DSLIDE_ACTION: dslide-action-narrow :header nil
:END:
- The content and heading are still displayed
- The slide-in effect still works
- But there is no title or other header information
- See more options in the ~dslide-action-narrow~ class slots:
  =M-x describe-symbol dslide-action-narrow=
* Babel Slide Integration
:PROPERTIES:
:DSLIDE_ACTIONS: dslide-action-babel
:END:
Go 2-3 steps forwards and then backwards.  This slide also supports starting at the end.  Just go to the next slide and back up.
#+attr_dslide: begin end
#+begin_src elisp :results none
  (setq-local overlays nil)
  (goto-char (point-min))
  (while (re-search-forward "overlay" nil t)
    (let ((overlay (make-overlay (match-beginning 0)
                                 (match-end 0))))
      (push overlay overlays)))
#+end_src

#+attr_dslide: backward
#+begin_src elisp :results none
  (mapc (lambda (o) (overlay-put o 'display nil)) overlays)
#+end_src

#+attr_dslide: both
#+begin_src elisp :results none
  (mapc (lambda (o) (overlay-put o 'display "ü•û")) overlays)
#+end_src

#+attr_dslide: both
#+begin_src elisp :results none
  (mapc (lambda (o) (overlay-put o 'display "ü•ûü•û")) overlays)
#+end_src

#+attr_dslide: forward end
#+begin_src elisp :results none
  (mapc (lambda (o) (overlay-put o 'display "ü•ûü•ûü•û")) overlays)
#+end_src

#+attr_dslide: final
#+begin_src elisp :results none
  (mapc #'delete-overlay overlays)
  (makunbound 'overlays)
#+end_src
* Hidden Babel Slide
This slide has a child, but it will not be displayed.  It will only run the babel block within, which finds and updates the text below:

Can has display?
** No Display!  Only Execute!
:PROPERTIES:
:DSLIDE_SLIDE_ACTION: nil
:DSLIDE_ACTIONS: dslide-action-babel
:END:
These four org blocks will not be displayed since this slide has no slide action.  They will however execute when navigating forward and backward.  Note these features:

- Blocks can have methods
- Multiple blocks can have the begin, end, and final method.  They are always executed top to bottom.  This allows better code re-use.

#+attr_dslide: end begin
#+begin_src elisp :results none
  ;; No need to deal with restriction or restore point.
  (org-up-heading-safe)
  (if (re-search-forward "\?" nil t)
      (setq-local dslide-can-has-overlay
                  (make-overlay (match-end 0) (match-end 0)))
    (message "Ouchie, the document changed!"))
#+end_src

Some extra setup that can also be returned to with step backwards
#+attr_dslide: begin backward
#+begin_src elisp :results none
  (overlay-put dslide-can-has-overlay 'after-string
               (propertize "  No display!  Only execute!"
                           'face 'error))
#+end_src

When going backwards, we begin at the end, which can also be stepped forwards to
#+attr_dslide: forward end
#+begin_src elisp :results none
  (overlay-put dslide-can-has-overlay 'after-string
               (propertize "  No display!  Only execute!"
                           'face 'success))
#+end_src

Our cleanup is always run, after everything
#+attr_dslide: final
#+begin_src elisp :results none
  (when (bound-and-true-p dslide-can-has-overlay)
    (delete-overlay dslide-can-has-overlay)
    (makunbound 'dslide-can-has-overlay))
#+end_src
* Package Integration
:PROPERTIES:
:DSLIDE_ACTIONS: dslide-action-babel
:END:
- You need the ~master-of-ceremonies~ package installed to complete this slide.
- Let arbitrary buffers be shown while still completing steps within the slide-show.
- Run babel against other buffers üòà.

#+attr_dslide: begin
#+begin_src elisp :results none
  (require 'master-of-ceremonies)
#+end_src
#+attr_dslide: final backward
#+begin_src elisp :results none
  (when-let ((buffer (get-buffer "*MC Focus*")))
    (kill-buffer buffer))
#+end_src

#+attr_dslide: both
  #+begin_src elisp :results none
  (mc-focus "üñäÔ∏è")
  #+end_src
#+attr_dslide: both
#+begin_src elisp :results none
  (mc-focus "üñäÔ∏èüçç")
  #+end_src
#+attr_dslide: both
#+begin_src elisp :results none
  (mc-focus "üñäÔ∏èüççüçé")
  #+end_src
#+attr_dslide: both
#+begin_src elisp :results none
  (mc-focus "üñäÔ∏èüççüçéüñäÔ∏è")
  #+end_src
* Babel is every Feature
:PROPERTIES:
:DSLIDE_ACTIONS: dslide-action-babel
:END:
If a feature seems like it's missing, it can probably be added.  There is a babel block below this paragraph, but if you are viewing this presentation, you won't see it because it has hidden itself with an overlay.  File an issue, but don't be held back.  A quick hunk of [[info:elisp#Top][elisp]] can solve every problem.
#+attr_dslide: begin end
#+begin_src elisp :results none
  (let* ((block (org-element-at-point))
         (overlay (make-overlay (org-element-property :begin block)
                                (org-element-property :end block))))
    (overlay-put overlay 'display "")
    (push overlay dslide--overlays))
#+end_src
* Customization
View customize variables by calling =M-x customize-group RET dslide=
** Slide Actions
Slide actions are configured using the heading's property drawer.
** Hiding Markup
Check out ~mc-hide-markup-mode~ in the [[https://github.com/positron-solutions/master-of-ceremonies][master-of-ceremonies]] package.
** Steezing Org
The setup used for the Positron's YouTube demos is not much more complex than this well-documented setup by [[https://systemcrafters.net/emacs-tips/presentations-with-org-present/][System Crafters]].  Also see Prot's [[https://protesilaos.com/codelog/2020-07-17-emacs-mixed-fonts-org/][further]] documentation on customizing org mode faces and fonts.

In short, use:
- ~org-modern~
- ~org-appear~
- ~nerd-icons~ for more cheesy Óò≤(Emacs logo)
- And set the faces for org headings and document title.

Don't forget built-in ~emoji-search~ and searching ~insert-char~.

Positron is cheating and also apply custom line-spacing and line-height.  While Psionic maintains a custom ~org-modern~, using custom spacing everywhere fights with ~visual-line-mode~ currently.
** Bindings
Bind the command ~dslide-deck-start~ in the ~org-mode-map~.  Any key will do.
** Custom Actions
:PROPERTIES:
:DSLIDE_ACTIONS: dslide-action-babel
:END:
The babel block below is a custom action supporting both forward, each step making a paragraph red when going forward or removing the red when going backward.  Key methods you want to use in your custom actions:
- ~dslide-section-next~
- ~dslide-section-previous~
- ~dslide-section-marker~
#+attr_dslide: begin end
#+begin_src elisp elisp :results none
  (defclass dslide-action-red-paragraphs (dslide-action)
    ((overlays :initform nil))
    "Paint the paragraphs red, one by one.")

  ;; Default no-op `dslide-begin' is sufficient

  ;; Default implementation of `dslide-end', which just plays forward to the end,
  ;; is well-behaved with this class.

  ;; Remove any remaining overlays when calling final.
  (cl-defmethod dslide-final :after ((obj dslide-action-red-paragraphs))
    (mapc #'delete-overlay (oref obj overlays)))

  ;; Find the next paragraph and add an overlay if it exists
  (cl-defmethod dslide-forward ((obj dslide-action-red-paragraphs))
    (when-let ((paragraph (dslide-section-next obj 'paragraph)))
      (let* ((beg (org-element-property :begin paragraph))
             (end (org-element-property :end paragraph))
             (new-overlay (make-overlay beg end)))
        (overlay-put new-overlay 'face 'error)
        (push new-overlay (oref obj overlays))
        ;; Return non-nil to indicate progress was made.  This also informs the
        ;; highlight when following the slides in the base buffer.
        beg)))

  (cl-defmethod dslide-backward ((obj dslide-action-red-paragraphs))
    (when-let* ((overlay (pop (oref obj overlays))))
      (delete-overlay overlay)
    ;; If there is a preceding overlay, move to its beginning else move to the
    ;; beginning of the heading.
    (if-let ((overlay (car (oref obj overlays))))
        (dslide-marker obj (overlay-start overlay))
      (dslide-marker obj (org-element-property :begin (dslide-heading obj))))))
#+end_src
*** Custom Action Demo
:PROPERTIES:
:DSLIDE_ACTIONS: dslide-action-red-paragraphs
:END:
Massachusetts, in particular, has always been one of the laboratories of democracy. It's where people try things before they're popular. It's where we experiment.

Democracy depends on an informed citizenry and the social cohesion that those citizens can show even when they disagree.

The essence of democracy is the resolve of individuals working together to shape our institutions and our society in ways that allow all of us to flourish.
* Enjoy!
- This package use used to create videos on Positron's own [[https://www.youtube.com/channel/UCqM0zDcFNdAHj7uQkprLszg/][YouTube ÔÖ™]] channel
- File issues and request features to give us ideas about usage and need
- To participate in our effort to accelerate Emacs into this upcoming era of change, become a contributor one of our [[https://github.com/sponsors/positron-solutions][Github Sponsors]].
