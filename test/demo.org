#+title:	Macro Slides
#+author:	Positron
#+email:	contact@positron.solutions

* Breadcrumbs
This information goes deep
** Deep
And it will go deeper still yet
*** Deeper
The rabbit hole has only the bounds of your imagination
**** Deepest?
Wow, these breadcrumbs are very high-carb
***** Okay Deep Enough!
How many levels of headings could there be?
* Inline Children
:PROPERTIES:
:MS_CHILD_ACTION: ms-child-action-inline
:END:
- You won't believe these animations
- This is the world's greatest presentation software
  + But mainly because it integrates with all you programming tools
** Pen 🖊️
Information, you have to breathe it in
** Pineapple 🍍
Isn't this animation so cool?
** Apple 🍎
This is a reason to be alive
** Pen 🖊️
[[https://www.youtube.com/watch?v=Ct6BUPvE2sM][In case you live under a rock]]
* Flat Slide
:PROPERTIES:
:MS_SLIDE_ACTION: ms-action-narrow :with-children t
:MS_CHILD_ACTION: nil
:END:
This slide shows its child headings inline.
- The slide action shows the entire contents, not just the section
- There is no child action
** Blue Team
- Has to do all the work
- Must create an air-tight submarine
** Red Team
- Uses some metasploit and calls it a day
- Failure is an option
* Reveal Items
:PROPERTIES:
:MS_SECTION_ACTIONS: ms-action-item-reveal
:END:
Positron is deeply committed to bringing you the finest in:
- Pen 🖊️
- Pineapple 🍍
- Apple 🍎
- Pen 🖊️
* Image Slides
:PROPERTIES:
:MS_SLIDE_ACTION: ms-action-narrow
:MS_SECTION_ACTIONS: ms-action-image ms-action-babel
:MS_CHILD_ACTION: ms-child-action-slide
:END:
This is an image slide.  You can view the images inline using ~org-toggle-inline-images~.  Each image will be opened in a full-screen buffer, which is configured to act as a slide, so it still responds to the keybindings.

#+ATTR_HTML: :width 45%
 [[./images/emacsen4.jpeg]] [[./images/self-care5.jpeg]]
#+ATTR_HTML: :width 45%
 [[./images/before-google3.jpeg]] [[./images/all-software-is-the-same-with-tang.jpeg]]
* Babel Slide Integration
:PROPERTIES:
:MS_SECTION_ACTIONS: ms-action-babel
:END:

Both backwards and forward are supported on this slide.

#+attr_ms: init end
#+begin_src elisp :results none
  (setq-local overlays nil)
  (goto-char (point-min))
  (while (re-search-forward "overlay" nil t)
    (let ((overlay (make-overlay (match-beginning 0)
                                 (match-end 0))))
      (push overlay overlays)))
#+end_src

#+attr_ms: step-backward
#+begin_src elisp :results none
  (mapc (lambda (o) (overlay-put o 'display nil)) overlays)
#+end_src

#+attr_ms: step-both
#+begin_src elisp :results none
  (mapc (lambda (o) (overlay-put o 'display "🥞")) overlays)
#+end_src

#+attr_ms: step-both
#+begin_src elisp :results none
  (mapc (lambda (o) (overlay-put o 'display "🥞🥞")) overlays)
#+end_src

#+attr_ms: step-forward end
#+begin_src elisp :results none
  (mapc (lambda (o) (overlay-put o 'display "🥞🥞🥞")) overlays)
#+end_src

#+attr_ms: final
#+begin_src elisp :results none
  (mapc #'delete-overlay overlays)
  (makunbound 'overlays)
#+end_src
* Hidden Babel Slide
This slide has a child, but it will not be displayed.  It will only run the babel block within, which finds and updates the text below:

Can has display?
** No Display!  Only Execute!
:PROPERTIES:
:MS_SLIDE_ACTION: nil
:MS_SECTION_ACTIONS: ms-action-babel
:END:
These three org blocks will not be displayed since this slide has no slide action.  They will however execute when navigating forward and backward.  Note these features:

- Blocks can have methods
- Multiple blocks can have the init, end, and final method.  They are always executed top to bottom.  This allows better code re-use.

#+attr_ms: end init
#+begin_src elisp :results none
  ;; No need to deal with restriction or restore point.
  (org-up-heading-safe)
  (if (re-search-forward "\?" nil t)
      (setq-local ms-can-has-overlay
                  (make-overlay (match-end 0) (match-end 0)))
    (message "Ouchie, the document changed!"))
#+end_src

Some extra init can also be returned to with step backwards
#+attr_ms: init step-backward
#+begin_src elisp :results none
  (overlay-put ms-can-has-overlay 'after-string
               (propertize "  No display!  Only execute!"
                           'face 'error))
#+end_src

When going backwards, we begin at the end, which can also be stepped forwards to
#+attr_ms: step-forward end
#+begin_src elisp :results none
  (overlay-put ms-can-has-overlay 'after-string
               (propertize "  No display!  Only execute!"
                           'face 'success))
#+end_src

Our cleanup is always run
#+attr_ms: final
#+begin_src elisp :results none
  (when (bound-and-true-p ms-can-has-overlay)
    (delete-overlay ms-can-has-overlay)
    (makunbound 'ms-can-has-overlay))
#+end_src
* Package Integration
:PROPERTIES:
:MS_SECTION_ACTIONS: ms-action-babel
:END:
- Let arbitrary buffers be shown while still completing steps within the slide-show
- Run babel against other buffers 😈

#+attr_ms: init
#+begin_src elisp :results none
  (require 'master-of-ceremonies)
#+end_src
#+attr_ms: final step-backward
#+begin_src elisp :results none
  (when-let ((buffer (get-buffer "*MC Focus*")))
    (kill-buffer buffer))
#+end_src

#+attr_ms: step-both
  #+begin_src elisp :results none
  (mc-focus "🖊️")
  #+end_src
#+attr_ms: step-both
#+begin_src elisp :results none
  (mc-focus "🖊️🍍")
  #+end_src
#+attr_ms: step-both
#+begin_src elisp :results none
  (mc-focus "🖊️🍍🍎")
  #+end_src
#+attr_ms: step-both
#+begin_src elisp :results none
  (mc-focus "🖊️🍍🍎🖊️")
  #+end_src
* Thanks for Watching
- Publishing after some cleanup refactoring
- Should show up on MELPA and Non-GNU MELPA
- Using this in my own videos
